# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- checkout: self
  fetchDepth: 2

- script: |
    FILES=$(git diff --name-only HEAD~1 HEAD)
    echo "##vso[task.setvariable variable=changedFiles]$FILES"
  displayName: 'Get changed files'

- script: |
    echo $(changedFiles)
  displayName: 'Display changed files'

- script: |
    cat $(changedFiles)
  displayName: 'View content of changedFiles'

- script: |
    if [[ "$(changedFiles)" == global* ]]; then
      echo "##vso[task.setvariable variable=startsWithGlobal]true"
      LAST_PART=$(basename $(changedFiles))
      echo "##vso[task.setvariable variable=lastPart]$LAST_PART"
    else
      echo "##vso[task.setvariable variable=startsWithGlobal]false"
      exit 1
    fi
  displayName: 'Check if changedFiles starts with "global"'

- task: ServiceNow-DevOps-Config-Agent-Upload-Config@1
  condition: eq(variables['startsWithGlobal'], 'true')
  inputs:
    connectedServiceName: 'snow8'
    applicationName: 'Snow8Demo'
    uploadTarget: 'component'
    configFile: '$(changedFiles)'
    namePath: '$(lastPart)'
    dataFormat: 'xml'
    autoValidate: true
    autoCommit: true
    convertPath: true



# - script: |
#     pip install beautifulsoup4 lxml
#   displayName: 'Install beautifulsoup4 and lxml'

# - script: |
#     python -c "
#     from bs4 import BeautifulSoup

#     def remove_cdata_tags(text):
#         return text.replace('<![CDATA[', '').replace(']]>', '')

#     with open('$(changedFiles)', 'r') as f:
#         contents = f.read()

#     soup = BeautifulSoup(contents, 'lxml')

#     for script in soup.find_all('script'):
#         cdata = script.string  # get CDATA content
#         print(cdata)
#         cdata_content = remove_cdata_tags(cdata)  # remove CDATA tags
#         print(cdata_content)
#         with open('script.js', 'w') as f:
#             f.write(cdata_content)
#     "
#   displayName: 'Extract <script> content to script.js'

- script: |
    python -c "
    import xml.etree.ElementTree as ET

    def remove_cdata_tags(text):
        return text.replace('<![CDATA[', '').replace(']]>', '')

    tree = ET.parse('$(changedFiles)')
    root = tree.getroot()

    for script in root.iter('script'):
        cdata = script.text  # get CDATA content
        # print(cdata)
        cdata_content = remove_cdata_tags(cdata)  # remove CDATA tags
        # print(cdata_content)
        with open('script.js', 'w') as f:
            f.write(cdata_content + '\n') # magic \n must be added else f.write is not able to get the very last line
    "
  displayName: 'Extract <script> content to script.js'




- script: |
    echo "Current Directory:"
    pwd
    echo "List files:"
    ls -la
    echo "Contents of script.js:"
    cat script.js
  displayName: 'View content of script'
  

- script: |
    echo '{
        "env": {
            "browser": true,
            "es6": true
        },
        "globals": {
            "current": "readonly",
            "previous": "readonly",
            "g_scratchpad": "readonly",
            "gs": "readonly",
            "GlideRecord": "readonly",
            "GlideElement": "readonly",
            "GlideSystem": "readonly",
            "GlideAjax": "readonly"
        },
        "extends": "eslint:recommended",
        "parserOptions": {
            "ecmaVersion": 2015
        },
        "rules": {
        }
    }' > .eslintrc.json
  displayName: 'Create ESLint configuration'



- script: |
    npm install eslint
  displayName: 'Install ESLint'

- script: |
    npx eslint script.js
  displayName: 'ESLint Check'

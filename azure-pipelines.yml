# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- checkout: self
  fetchDepth: 2

- script: |
    FILES=$(git diff --name-only HEAD~1 HEAD)
    echo "##vso[task.setvariable variable=changedFiles]$FILES"
  displayName: 'Get changed files'

- script: |
    echo $(changedFiles)
  displayName: 'Display changed files'

- script: |
    if [[ "$(changedFiles)" == global* ]]; then
      echo "##vso[task.setvariable variable=startsWithGlobal]true"
      LAST_PART=$(basename $(changedFiles))
      echo "##vso[task.setvariable variable=lastPart]$LAST_PART"
    else
      echo "##vso[task.setvariable variable=startsWithGlobal]false"
      exit 1
    fi
  displayName: 'Check if changedFiles starts with "global"'

- task: ServiceNow-DevOps-Config-Agent-Upload-Config@1
  condition: eq(variables['startsWithGlobal'], 'true')
  inputs:
    connectedServiceName: 'snow8'
    applicationName: 'Snow8Demo'
    uploadTarget: 'component'
    configFile: '$(changedFiles)'
    namePath: '$(lastPart)'
    dataFormat: 'xml'
    autoValidate: true
    autoCommit: true
    convertPath: true

#- script: |
#    sudo apt-get install -y xmlstarlet
#  displayName: 'Install xmlstarlet'

#- script: |
#    SCRIPT_CONTENT=$(xmlstarlet sel -t -v "//script" $(changedFiles))
#    echo "$SCRIPT_CONTENT" > $(lastPart).js
#  displayName: 'Extract <script> content to $(lastPart).js'





- script: |
    SCRIPT_CONTENT=$(sed -n '/<script><![CDATA[/,/]]><\/script>/p' $(changedFiles) | awk 'BEGIN{p=0} /^<script><!\[CDATA\[/,/^]]><\/script>$/{ if (!/<script><!\[CDATA\[/ && !/]]><\/script>/) p=1; if (p) print }')
    echo "$SCRIPT_CONTENT" > $(lastPart).js
    echo "$SCRIPT_CONTENT"
    echo $(lastPart).js
  displayName: 'Extract <script> content to script.js'


- script: |
    cat $(lastPart).js
  displayName: 'View content'


- script: |
    pip install lxml
  displayName: 'Install lxml'


- script: |
    python -c "
    import lxml.etree as ET
    import re
    import os

    try:
        tree = ET.parse('$(changedFiles)')
        root = tree.getroot()

        script_found = False
        for script in root.iter('script'):
            script_found = True
            cdata_content = re.search(r'<!\[CDATA\[(.*)\]\]>', script.text, re.DOTALL)
            if cdata_content:
                with open('script.js', 'w') as f:
                    f.write(cdata_content.group(1))  # write the matched group to file
        if not script_found:
            print('Error: No <script> element found in the XML file')
    except Exception as e:
        print('Error while parsing XML:', str(e))
        print('Current Directory:', os.getcwd())
    "
  displayName: 'Extract <script> content to script.js'


- script: |
    echo "Current Directory:"
    pwd
    echo "List files:"
    ls -la
    echo "Contents of script.js:"
    cat script.js
  displayName: 'View content of script'


